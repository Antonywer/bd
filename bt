import logging
import json
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = "7658744424:AAH3kuLvTLfF2oqpEhjA1xejDx20Ti0-5SE"
BIRTHDAY = datetime.datetime(2006, 1, 8, 0, 0)  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è

# –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Å—Ç—å —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
data_file = 'user_data.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(data_file):
        with open(data_file, 'r') as file:
            return json.load(file)
    else:
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(data_file, 'w') as file:
        json.dump(data, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def add_or_update_user_data(user_id, interval, birthday):
    data = load_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if user_id in data:
        data[user_id]['interval'] = interval  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        data[user_id]['birthday'] = birthday.strftime("%Y-%m-%d %H:%M:%S")  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        data[user_id] = {
            'interval': interval,
            'birthday': birthday.strftime("%Y-%m-%d %H:%M:%S")
        }
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
scheduler = BackgroundScheduler()

async def send_life_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∂–∏—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    now = datetime.datetime.now()
    delta = now - BIRTHDAY
    years = delta.days // 365
    days = delta.days % 365
    hours = delta.seconds // 3600
    weeks = delta.days // 7

    text = (f"–í—ã –ø—Ä–æ–∂–∏–ª–∏:\n"
            f"{years} –ª–µ—Ç\n"
            f"{weeks} –Ω–µ–¥–µ–ª—å\n"
            f"{days} –¥–Ω–µ–π\n"
            f"{hours} —á–∞—Å–æ–≤")

    await update.message.reply_text(text)

async def send_life_time_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    await send_life_time(query, context)

async def set_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.args and context.args[0].isdigit():
        interval = int(context.args[0])

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        scheduler.remove_all_jobs()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        scheduler.add_job(
            send_life_time,
            "interval",
            days=interval,
            args=[update, context],
            id=str(update.effective_user.id),
            replace_existing=True
        )

        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set 7)")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–æ–π"""
    keyboard = [[InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="life_time")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∂–∏–∑–Ω–∏.\n"
        "üìå –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.\n"
        "üìå –£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: /set <–¥–Ω–∏>.",
        reply_markup=reply_markup
    )

async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    user_id = update.message.from_user.id

    if context.args and len(context.args) == 1:
        try:
            new_birthday = datetime.datetime.strptime(context.args[0], "%Y-%m-%d")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            add_or_update_user_data(user_id, 5, new_birthday)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –∏–Ω—Ç–µ—Ä–≤–∞–ª = 5

            await update.message.reply_text(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_birthday.strftime('%Y-%m-%d')}.")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_birthday <–Ω–æ–≤–∞—è_–¥–∞—Ç–∞> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_schedule))
    app.add_handler(CommandHandler("set_birthday", set_birthday))
    app.add_handler(CallbackQueryHandler(send_life_time_callback, pattern="life_time"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
